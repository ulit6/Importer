/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.ulit.importerView;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.slf4j.LoggerFactory;
import pl.ulit.dbInsert.Database;
import pl.ulit.dbInsert.DatabaseException;

/**
 *
 * @author ulit6
 */
public final class LoginView extends javax.swing.JDialog {
    private String database;
    private String host;
    private String port;
    private String user;
    private String rdbms;
    private final static String propertiesFile = "Importer.properties";
    private Database db;
    private Connection con;
    /**
     * Creates new form LoginView
     */
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(LoginView.class);
    public  LoginView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();      
        initScreen();   
    }
    private void initScreen(){   
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        setLocation((screenSize.width-frameSize.width)/2, (screenSize.height-frameSize.height)/2);
        loadProperties();         
    }
    private void loadProperties() {
        InputStream is = null;
        try{
             is = new FileInputStream(propertiesFile);
        } catch(FileNotFoundException ex){
            JOptionPane.showMessageDialog(this, ex.toString(),"IOException",JOptionPane.ERROR_MESSAGE);
        }
        Properties config = new Properties();
        try {
            config.load(is);
        } catch (IOException ex) {
             JOptionPane.showMessageDialog(this, ex.toString(),"IOException",JOptionPane.ERROR_MESSAGE);
            
        }
        
        database = config.getProperty("Database");
        host = config.getProperty("Host");
        port = config.getProperty("Port");
        user = config.getProperty("User");
        rdbms = config.getProperty("Rdbms");
        DatabaseTextField.setText(database);
        HostTextField.setText(host);
        PortTextField.setText(port);
        UserTextField.setText(user);
        RDBMSComboBox.setSelectedItem(rdbms);
        try {            
            is.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(),"IOException",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    private void koniec()
    {
        System.exit(0);
        db.disconnect();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RDBMSLabel = new javax.swing.JLabel();
        HostLabel = new javax.swing.JLabel();
        HostTextField = new javax.swing.JTextField();
        DatabaseLabel = new javax.swing.JLabel();
        DatabaseTextField = new javax.swing.JTextField();
        RDBMSComboBox = new javax.swing.JComboBox();
        PortLabel = new javax.swing.JLabel();
        PortTextField = new javax.swing.JTextField();
        UserLabel = new javax.swing.JLabel();
        UserTextField = new javax.swing.JTextField();
        PasswordLabel = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("AUTHORIZATION");

        RDBMSLabel.setText("RDBMS:");

        HostLabel.setText("Host:");

        DatabaseLabel.setText("Database:");

        RDBMSComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MySQL", "MSSQL" }));
        RDBMSComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RDBMSComboBoxActionPerformed(evt);
            }
        });

        PortLabel.setText("Port:");

        PortTextField.setText("3306");

        UserLabel.setText("User:");

        PasswordLabel.setText("Password:");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PasswordLabel)
                            .addComponent(UserLabel)
                            .addComponent(PortLabel)
                            .addComponent(DatabaseLabel)
                            .addComponent(HostLabel)
                            .addComponent(RDBMSLabel))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(DatabaseTextField)
                            .addComponent(RDBMSComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UserTextField)
                            .addComponent(jPasswordField1))))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CancelButton, jButton1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RDBMSLabel)
                    .addComponent(RDBMSComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HostLabel)
                    .addComponent(HostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DatabaseLabel)
                    .addComponent(DatabaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PortLabel)
                    .addComponent(PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserLabel)
                    .addComponent(UserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordLabel)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(CancelButton))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Properties config = new Properties();
        try {
            OutputStream out = new FileOutputStream(propertiesFile);
            config.setProperty("Database",DatabaseTextField.getText());
            logger.info(DatabaseTextField.getText());
            config.setProperty("Host", HostTextField.getText());
            config.setProperty("Port", PortTextField.getText());
            config.setProperty("User", UserTextField.getText());
            config.setProperty("Rdbms", (String)RDBMSComboBox.getSelectedItem());
            logger.info(UserTextField.getText());
            config.store(out, "");
            out.close();
            
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(),"FileNotFoundException",JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(),"FileNotFoundException",JOptionPane.ERROR_MESSAGE);
        }
        char[] password = jPasswordField1.getPassword();
        String strPassowrd = String.valueOf(password);
        rdbms = (String) RDBMSComboBox.getSelectedItem();
        database = DatabaseTextField.getText();
        host = HostTextField.getText();
        port = PortTextField.getText();
        user = UserTextField.getText();
        
        try{
             db = new Database(rdbms, host, Integer.parseInt(port), database, user, strPassowrd);
             con = db.getConnection();
        }
        catch(DatabaseException ex){
            JOptionPane.showMessageDialog(this, ex.toString(),"DatabaseException",JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            if( con!=null){ 
                con.isValid(1);
                logger.info("Connection is valid");
                this.setVisible(false);
                ImporterView importerView = new ImporterView();
                importerView.setConnection(con);
                importerView.setRdbms(rdbms);
                importerView.setVisible(true);
                
            }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(),"SQLException",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void RDBMSComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RDBMSComboBoxActionPerformed
        // TODO add your handling code here:
        String db =(String)RDBMSComboBox.getSelectedItem();
        logger.info(db);
      
    }//GEN-LAST:event_RDBMSComboBoxActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        koniec();
    }//GEN-LAST:event_CancelButtonActionPerformed
    public Connection getConnection(){
        return this.con;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginView(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel DatabaseLabel;
    private javax.swing.JTextField DatabaseTextField;
    private javax.swing.JLabel HostLabel;
    private javax.swing.JTextField HostTextField;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JLabel PortLabel;
    private javax.swing.JTextField PortTextField;
    private javax.swing.JComboBox RDBMSComboBox;
    private javax.swing.JLabel RDBMSLabel;
    private javax.swing.JLabel UserLabel;
    private javax.swing.JTextField UserTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JPasswordField jPasswordField1;
    // End of variables declaration//GEN-END:variables
}
